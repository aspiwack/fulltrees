(* -*- compile-command: "ocamlbuild -classic-display fulltrees.pdf" -*- *)

open Prelude
open Ocamlmode


##plugin coqdoc
##verbatim '@' = coqdoc
##verbatim '#' = ocaml_code

(*** labels ***)

let s_algo = label ()
let s_ocaml = label ()
let s_coq = label ()

(*** doc ***)
let abstract = "Starting with an algorithm to turn lists into full trees which uses non-obvious invariants and partial functions, we progressively encode the invariants in the types of the data, removing most of the burden of a correctness proof.

The invariants are encoded using non-uniform inductive types which parallel numerical representations in a style advertised by Okasaki, and a small amount of dependent types."

let intro = "{section"Introduction"}

Starting with a list <#lst#>, we want to turn it into a binary tree <#tr#> of the following form (in Ocaml):

{display"<#type 'a tree =
  | Node of 'a tree * 'a * 'a tree
  | Leaf#>"}

With the constraints that <#lst#> must be the infix traversal of <#tr#> and that <#tr#> must be {emph"full"}, in the sense that every level except the last are required to be completely filled. Such a function turns, in particular, sorted list into balanced binary search trees.

There are a number of algorithms to achieve this result in linear time. Here we consider an algorithm, presented in Section~{ref_ s_algo}, which repeatedly pairs up trees of height $h$ in a list to form a list of trees of height $h+1$. Our interest in this algorithm sprouts from the fact that its correctness is not obvious; in particular the invariants are complex: the main loop operates on a list of length $2^k-1$ whose elements are alternately of two distinct forms.

In Sections~{ref_ s_ocaml} and~{ref_ s_coq} we show refinements of the algorithm where the invariants are pushed into the types, leading to a complete and short proof of correctness in Coq.
"

let algo = "{section"A balancing algorithm" ~label:s_algo}

We start by giving a first, simple, implementation of the balancing algorithm. The heart of the algorithm relies on using an alternating list of length ${exponent $2$ $k$}-1$, where odd-position elements are trees and even-position elements are labels, of type <#'a#>.  A full tree can be decomposed into the first $k-1$ levels, containing ${exponent $2$ $k-1$} -1$ internal nodes, and the $k$th level, which contains both nodes and leaves. Thus, the ${exponent $2$ $k-1$} - 1$ labels in the alternating list will be used to label the internal nodes in the $k-1$ first levels of the balanced tree, while the ${exponent $2$ $k-1$}$ trees, all of height at most one at first, will constitute the level $k$.

Though we could encode labels as trees of height one in the alternating list, we rather use an appropriate type for the sake of readability:

{display"<#type 'a tree_or_elt =
| Elt of 'a
| Tree of 'a tree#>"}

We decompose the problem into two parts: computing an alternating list of length ${exponent $2$ $k$} - 1$ from an arbitrary list of labels, and then transforming this alternating list into a balanced tree. We first show how to solve the second part: turning an alternating list into a full tree.

Given an alternating list <#lst#>, by pairing the trees in <#lst#> using only one traversal of the list, we obtain an alternating list with exactly half as many trees. Each pairing requires two trees and one label used as a root. In order to build a list that is alternated, we also need a second label, that is kept as a single element. This explains why we consider at each step the four first elements of the list.

A single traversal, encoded by <#pass : 'a tree_or_elt list -> 'a tree_or_elt_list#>, reduces an alternating list of length ${exponent $2$ $k$} - 1 {geqslant} 3$ to an alternating list of length ${exponent $2$ $k-1$} -1$. By iterating this process using <#loop : 'a tree_or_elt list -> 'a tree#>, we reduce the original list to a list of length one, whose one element is a balanced tree <#t#> such that the infix traversal of <#t#> is the initial list. 

{display"<#let join left node right = Tree (Node (left, node, right))

let rec pass list = match  list with
  | Tree left :: Elt root :: Tree right :: Elt e :: others ->
      join left root right :: Elt e :: pass others
  | [Tree left; Elt root; Tree right] -> [join left root right]
  | _ -> assert false

let rec loop list = match list with
  | [] -> Leaf
  | [Tree t] -> t
  | list -> loop (pass list)
#>"}

Notice how the invariant that alternating lists have length $2^k-1$ is maintained: this is because, for $k {geqslant} 2$, we have $2^k - 1 = 4 {times} ({exponent $2$ $k-2$} - 1) + 3$, hence we obtain an alternating list of length $2 {times} ({exponent $2$ $k-2$} - 1) + 1 = {exponent $2$ $k-1$} - 1$.

It remains to show how to transform a list of labels of length $n$ into an alternating list of trees and labels. Each of the original trees has height zero or one: they are leaves or contain only one label. Because we want a list of length precisely $2^k -1$, for $k = 1 + {between `Floor ${index log_ $2$} n$}$, it means we need $2^k - 1 - n$ leaves. This quantity is computed as the variable <#missing#>. The function <#pad#> computes the alternating list by creating as many leaves as needed, alternating them with elements, and once enough leaves are created, promotes all the odd-position labels into trees.

{display"<#let complete list =
  let n = List.length list in
  let rec pow2 i = if i <= n then pow2 (2*i) else i in 
  let missing = (pow2 1) - n - 1 in
  let rec pad missing = function
    | head::tail when missing <> 0 ->
        Tree Leaf :: Elt head :: pad (missing - 1) tail
    | odd::even::others -> join Leaf odd Leaf :: Elt even :: pad 0 others
    | [single] -> [join Leaf single Leaf]
    | [] -> []
  in
  pad missing list
#>"}

The balancing algorithm <#balance: 'a list -> 'a tree #> is thus given by the composition of <#loop#> with <#complete#>:
{display"<#let balance list = loop (complete list)#>"}
(* arnaud: we will need to speak of how the position of the leaves in the alternating list does not matter, as it will change a little in the other sections *)
"



let ocaml = "{section"Removing partial functions" ~label:s_ocaml}

The <#loop#> function of Section~{ref_ s_algo} relies on the invariant that the <#list#> argument has length $2^k-1$. Additionally, all the odd-position values must be of the form <#Tree t#>, whereas all the even-position values must be of the form <#Elt x#>. If either of these invariants is broken, we would run into the <#assert false#> of <#pass#>.

It is not immediately apparent that these properties hold. If it does not take a tremendous effort to convince oneself that the <#balance#> function of Section~{ref_ s_algo} is indeed correct, a direct mechanically checked proof would not be very practical.

{subsection"Length invariants"}

Our goal in this section is to avoid resorting to <#assert false#>. In addition to making sure that <#balance#> indeed terminates with a value, it will make it considerably simpler to implement the balancing algorithm in Coq in Section~{ref_ s_coq}.
To achieve this goal, it is necessary to have more precise types.
Let us focus first on the length invariants: we will need to define a type which contains exactly the non-empty lists of length $2^k-1$.

A data structure which holds $2^k-1$ elements brings complete binary trees to mind. Even though it is possible -- though not necessary convenient -- to represent complete binary trees in Ocaml, they are not the appropriate structure. First, because complete binary trees are full trees and are, hence, unlikely to serve as a useful intermediate data structure to build a full tree. Second because there is a simpler -- albeit more exotic -- alternative.
Indeed, let us consider the following recursive definition of $2^k-1$:
{displaymath begin just_left `Brace (array [`L;`L;`L] [
  array_line [$2^0-1$; $=$ ; $0$];
  array_line [${exponent $2$ $k+1$}-1$; $=$; $2 {times} (2^k-1)+1$];
]) end}
Which is just a fancy way of saying that the $2^k-1$ are precisely those number which are written only with $1$-s in binary representation. In general, given a reasonable representation of (a subset of) the natural numbers, a corresponding structurally recursive definition of exponential can be deduced:
{displaymath begin just_left `Brace (array [`L;`L;`L] [
  array_line [exponent $a$ $2^0-1$; $=$ ; $1$];
  array_line [exponent $a$ ${exponent $2$ $k+1$}-1$; $=$; $a{times}{exponent $(a^2)$ $2^k-1$}$];
]) end}
If $a$ is read as a type, then $a^n$, is nothing but the type of lists of length $n$ whose elements have type $a$. Depending on the algorithm used to compute the exponential, one gets a different flavour of list. The standard linked lists correspond to the na√Øve algorithm ${exponent $a$ $k+1$}=a{times}a^k$, which is associated with the unary representation of numbers. Using the algorithm above, we restrict the lists to have length $2^k$ and the shape is more unusual. Generalising to an arbitrary $k$, we obtain the (non-uniformly recursive) datatype, which we shall call {emph"power lists"}:
{display"<#module PowerList = struct

  type 'a t =
    | Zero
    | TwicePlusOne of 'a * ('a*'a) t

end#>"}

The analogy between flavours of lists and numerical representation goes back to Guibas \& al. in~{cite"Guibas1977"} and is pushed further by Myers in~{cite"Myers1983"}. A thorough exploration of this correspondence is conducted by Okasaki in~{cite"Okasaki1999"}(*arnaud: add relevant chapters*) where he introduces the idea of using non-uniform inductive datatypes in the context of numerical representations. As a matter of fact, the type of power lists actually appears in~{cite"Okasaki1999"} as a pedagogical introduction to non-uniformly recursive lists. Relatedly, Okasasi uses, in~{cite"Okasaki1999a"}, a non-uniform recursive datatype to devise a type containing only square matrices, it is also based on numerical representations and uses a tail-recursive exponentiation.

Although the power lists may look like some sort of trees, it is not a very accurate depiction. The easiest way to picture how power lists works is to see <#TwicePlusOne#> as a fancy <#(::)#>, then the lists with, respectively, $1$, $3$, $7$, and $15$ elements are as follows:
{itemize [
  "<#[1]#>";
  "<#[1;(2,3)]#>";
  "<#[1;(2,3);((4,5),(6,7))]#>";
  "<#[1;(2,3);((4,5),(6,7));(((8,9),(10,11)),((12,13),(14,15)))]#>";
 ]}
Elements appear in order, like in a regular list, but they are packed twice as tightly after each <#TwicePlusOne#>.

Just like with regular lists, there is a {emph"map"} function for power lists. Due to the non-uniformity it is a little trickier{footnote"The type annotation on <#PowerList.map#> informs Ocaml that <#map#> is a non-uniform recursive function. Without the type annotation, Ocaml simply assumes that <#map#> is uniformly recursive and fails to typecheck since <#f#> and <#f'#> have different types."} than the regular list map: in the recursive steps, the argument function <#f#> needs to process two consecutive elements at a time.
{display"<#module PowerList = struct
  #{module_elipsis}#
  let rec map : 'a 'b. ('a->'b) -> 'a t -> 'b t = fun f -> function
    | Zero -> Zero
    | TwicePlusOne (elt,lst) ->
        let f' (x,y) = f x , f y in
        TwicePlusOne (f elt , map f' lst)

end#>"}

{subsection"Alternation"}

In Section~{ref_ s_algo}, labels are separated from trees dynamically. The <#pass#> function verifies that trees and labels are interleaved properly, and fails if they are not.

In this section, instead, we consider a variant of <#'a PowerList.t#> where every odd position contains a tree, and every even position contains an element. More generally, we define a type <#('odd,'even) AlternatingPowerList.t#> where odd positions have type <#'odd#>, and even positions have type <#'even#>. Such a list should have the following pattern:
{itemize [
  "<#['odd;('even,'odd);(('even,'odd),('even,'odd))]#>";
]}
After the first element, which must have type <#'odd#>, there is no difference between even and odd positions: indeed, excluding the first element, we are actually building an <#('even*'odd) PowerList.t#>. Hence the definition:
{display"<#module AlternatingPowerList = struct

  type ('odd,'even) t =
    | Zero
    | TwicePlusOne of 'odd * ('even*'odd) PowerList.t

end#>"}

For concision, let us write <#PL#> and <#APL#> for <#PowerList#> and <#AlternatingPowerList#> respectively.

Using these alternating power lists, we can define a version of the <#pass#> function free of <#assert false#>. Indeed, consider an alternating power list of length at least $3$:  it is of the form <#APL.TwicePlusOne (a, PL.TwicePlusOne ((b,c), lst))#>, where <#lst#> has type <#(('even*'odd)*('even*'odd)) PowerList.t#>. The <#pass#> function of Section~{ref_ s_algo}, as it happens, manipulates its arguments by groups of four elements: basically, <#pass#> is simply a <#map#> over <#lst#>.

(* <#pass:'a tree -> ('a*'a tree) -> (('a*'a tree)*('a*'a tree)) PL.t -> ('a tree,'a) APL.t#> *)
We hence define the function <#pass#>
which joins the trees in a list of length ${exponent $2$ $k+2$}-1${footnote"To ensure that its argument list has at least three elements, <#pass#> takes the three first elements as extra arguments. In other words <#pass t (x,s) l#> is meant to be read as <#pass (APL.TwicePlusOne (t , PL.TwicePlusOne ((x,s),l)))#>."}, producing a list of length ${exponent $2$$k+1$}-1$. The function <#loop#> is virtually unchanged from Section~{ref_ s_algo}, except it acts on power lists:
{display"<#
let pass left (root,right) apl =
  let join_up ((single,left),(root,right)) =
    single, Node (left,root,right)
  in
  APL.TwicePlusOne ( Node (left,root,right) , PL.map join_up apl)

let rec loop : 'e. ('e tree,'e) APL.t -> 'e tree = function
  | APL.Zero -> Leaf
  | APL.TwicePlusOne (tree,PL.Zero) -> tree
  | APL.TwicePlusOne (tree,PL.TwicePlusOne (pair,apl)) ->
      loop (pass tree pair apl)#>"}

{subsection"Padding"}

Now that there is no more <#assert false#> in the code of <#loop#>, we need to change the <#complete#> function of Section~{ref_ s_algo} so that it returns an <#('a tree,'a) APL.t#> rather than a list. The heart of this section is a function which turns an <#'a list#> into an <#('a*'a tree) PL.t#>. The final function, which produces an <#('a tree,'a) APL.t#> is a simple wrapper around the former.

We want to turn a list <#lst#> of length $n+1$ into a pair of its first element, converted into a tree, plus a power list of length $2{times}(2^k-1){geqslant} n$ representing its tail <#tail#>. Each element of the power list is a pair, whose first term is an element, and its second term is a tree of height at most one. In particular, the length of the returned power list is always even, so if <#tail#> has odd length, we will need to insert at least a <#Leaf#>. This suggests that we may inspect the parity of the length of <#tail#>, and insert an extra element precisely when it is odd. This leads to a slightly different padding procedure than that of Section~{ref_ s_algo}, in particular the leaves are not inserted at the same position, but it is inconsequential.

An <#'a list#> of even length can be turned into an <#('a*'a) list#> whose length is halved. This turns out to be interesting for our recursion, since it mimics the inductive step of power lists. Also, in the case of even length, we need to distinguish the empty case from the non-empty case: the former will be turned into the empty power list <#APL.Zero#> while the latter will be turned into a power list of the form <#APL.TwicePlusOne((x,y),l)#>, where <#x#> and <#y#> correspond to the two first elements of <#tail#>. These different cases are represented in the following view:
{display"<#type 'a parity =
  | Empty
  | Odd of 'a * ('a*'a) list
  | Even of ('a*'a) * ('a*'a) list

let pair_up lst =
  let succ elt = function
    | Empty -> Odd (elt, [])
    | Odd (b,pairs) -> Even ((elt,b), pairs)
    | Even (bc,pairs) -> Odd (elt, bc::pairs)
  in List.fold_right succ lst Empty#>"}

The padding function itself, <#of_list#>, is at first-sight far from intuitive. Let's recall that we want to turn a list of labels of arbitrary length, into a power list of pairs. A label can be thought of as a bit of weight $2^0$, while a pair of labels would be a bit of weight $2^1$, and so on. At first, all our bits have weight $2^0$ and consists in one label each. We can build bits of higher weight by pairing up two bits of the same weight. A bit made up only of labels is called {emph"pure"}. We can also double the weight of a bit by interlacing leaves with it (with the function <#pad#>), but this gives a bit made of pairs of labels and trees, call them {emph"impure"}. Lastly, we can also transmute a pure bit into an impure bit of the same weight (with the function <#coerce#>), by replacing odd-position labels by trees of height one.

Each recursive step consists in taking a list of pure bits of the same weight $2^k$, and outputing exactly one impure bit of size ${exponent $2$ $k+1$}$, plus a list of pure bits of weight ${exponent $2$ $k+1$}$, which is converted recursively. We thus obtain, successively, one bit of each weight from $2^1$ to $2^l$, for some $l$, encoding a list of length ${exponent $2$ $l+1$} - 2$, as expected.

At any recursive step, suppose first that the number of bits of weight $2^k$ is odd. As we need to compute only bits of weight ${exponent $2$ $k+1$}$, one of them impure, we are forced to use <#pad#> on one bit, and to pair up the others. Suppose now that the number of bits of weight $2^k$ is even. In that case, we can pair them all into bits of weight ${exponent $2$ $k+1$}$, and then use <#coerce#> on one of them to make the impure bit.

The last difficulty is that <#pad#> and <#coerce#> both depend on the current weight of the bits, hence we need to update them at each recursive step. <#pad#> must add leaves between every two consecutive labels, in even positions, while <#coerce#> must upgrade every even-position label into a tree of height one. This leads to the following definition:
{display"<#module PowerList = struct
  #{module_elipsis}#
  let rec of_list : 'a 'b. ('a->'b) -> ('a*'a->'b) -> 'a list -> 'b t =
    fun pad coerce bits ->
      let pad' (x,y) = (pad x, pad y) in
      let coerce' (x,y) = (coerce x, coerce y) in
      match pair_up bits with
      | Empty -> Zero
      | Odd (a,pures) -> TwicePlusOne (pad a, of_list pad' coerce' pures)
      | Even (ab,pures) ->
          TwicePlusOne (coerce ab, of_list pad' coerce' pures)

  end#>"}

With that function, we can conclude our implementation. Again writing <#PL#> and <#APL#> for <#PowerList#> and <#AlternatingPowerList#> respectively:
(* arnaud: we probably don't need most of thie sentence now. *)

{display"<#module AlternatingPowerList = struct
  #{module_elipsis}#
  let of_list leaf up id = function
    | [] -> Zero
    | a::l ->
        let pad x = id x , leaf in
        let coerce (x,y) = id x , up y in
        TwicePlusOne (up a, PowerList.of_list pad coerce l)

end

let singleton x = Node(Leaf,x,Leaf)
let balance l =
  loop (APL.of_list Leaf singleton (fun e->e) l)#>"}
The final function, <#balance:'a list -> 'a tree#>, implements the same algorithm as Section~{ref_ s_algo} without any partial functions.
"

let coq = "{section"Turning to Coq" ~label:s_coq}

There is still a property of the algorithm that the implementation of Section~{ref_ s_ocaml} does not make obvious: that the algorithm actually does build {emph"full"} trees. In this section we shall build into the type of <@balance@> that its output is indeed full.

To that effect, we will use Coq rather than Ocaml. Even if it is possible, with some effort, to represent full trees and implement the algorithm in Ocaml -- and relatively easy in Haskell -- a Coq implementation also gives us termination by construction. Coq forces every recursion to be structural, which will prove to be rather entertaining.

At a superficial level, a visible difference with the Ocaml implementation is that <#Powerlist.t#> and <#AlternatingPowerList.t#> must be decorated with the $k$ such that the length is $2^k-1$: it is the structural recursion parameter of the <@balance_powerlist@> function. Because it makes the code simpler, we will use a recursive definition rather than an inductive one:
(* arnaud: if we keep the part of exponentiation, we should have a remark here that this definition of powerlist is exactly the exponentiation algorithms *)
{display"<@Module PowerList.

  Fixpoint T (A:Type) (k:nat) :=
    match k with
    | 0 => unit:Type
    | S k' => (A * T (A*A) k')%type
    end.

End PowerList.@>"}
We will also need a version where <@k@> can be arbitrary. For that purpose we use Coq's type of dependent pairs <@{ n:nat & F n}@>. The constructor for dependent pairs is written <@‚ü® n , x ‚ü©@>. The implicit version comes with constructors -- <@tpo@> stands for ``twice plus one'':
{display"<@Module PowerList.
  @{module_elipsis}@
  Definition U (A:Type) := { k:nat & T A k }.
  Definition zero {A:Type} : U A := ‚ü® 0 , tt ‚ü©.
  Definition tpo {A:Type} (a:A) (l:U (A*A)) : U A :=
    let '‚ü®k,l‚ü© := l in
    ‚ü® S k , (a,l) ‚ü©.

End PowerList@>"}
The definition of <@AlternatingPowerList.T@> and <@AlternatingPowerList.U@> are similar.

{subsection"Full trees"}

To code full trees, we index trees by their height, and specify that leaves can happen only at height $0$ or $1$:
{display"<@Inductive FullTree (A:Type) : nat -> Type :=
  | Leaf‚ÇÄ : FullTree A 0
  | Leaf‚ÇÅ : FullTree A 1
  | Node {k:nat} : FullTree A k -> A -> FullTree A k -> FullTree A (S k).@>"}

With this modification, the functions <@pass@> and <@balance_powerlist@> are virtually unmodified{footnote
"In fact, as can be seen from its type, <@loop@> only handles non-empty alternating power lists. This is due to a small technicality: the recursive step of <@loop@> is in the case <@S (S k@>, but Coq does not recognise <@S k@> as a structural subterm of <@S (S k)@>, so the definition from Section~{ref_ s_ocaml} does not verifies Coq's structural recursion criterion. As a workaround, the empty case is moved to the <@balance@> function."
} with respect to Section~{ref_ s_ocaml}. Only their types change to reflect the extra information:
{display"<@Definition pass {A k p} :
     APL.T (FullTree A (S p)) A (S (S k)) -> APL.T (FullTree A (S (S p))) A (S k).
Fixpoint loop {A k p} :
     APL.T (FullTree A (S p)) A (S k) -> FullTree A (plus k (S p)) {struct k}.@>"}
The algorithm indeed builds only full trees.

{subsection"Structural initialisation"}

The padding conversion from lists to power lists, in Section~{ref_ s_ocaml}, is not structural due to the use of <#pair_up#> in the recursive call. To tackle this recursion, we shall make use of another intermediate structure. What we need, essentially, is that all the calls to <#pair_up#> are pre-calculated, so the intermediate structure will be like <#parity#> except that the calls to <#('a*'a) list#> are replaced by calls to <#('a*'a) parity#>.

As it turns out, this is another non-uniform datatype which corresponds to a numerical representation. Indeed, we can write any natural number in binary with digits $1$ and $2$ (but not $0$). In this system, for example, $8$ is represented as $112$. Here is the definition:
(* arnaud: either explain that tpt stands for twice plus two, or change the name altogether *)
{display"<@Module BinaryList.

  Inductive T (A:Type) : Type :=
  | zero
  | tpo (a:A) (l:T (A*A))
  | tpt (a b: A) (l:T (A*A)).

End BinaryList.@>"}

To turn a non-empty list into a <@BinaryList.T@>, all we need is a function <@cons@> of type <@A -> T A -> T A@> to add an element in front of the list. On the numerical representation side, it corresponds to adding $1$. It behaves like adding $1$ in the usual binary representation, except that $1$-s are turned into $2$-s without a carry and $2$-s into $1$-s while producing a carry:
{display"<@Module BinaryList.
  @{module_elipsis}@
  Fixpoint cons {A} (a:A) (l:T A) : T A :=
    match l with
    | zero => tpo a zero
    | tpo b l => tpt a b l
    | tpt b c l => tpo a (cons (b,c) l)
    end.

End BinaryList.@>"}
Note that while <@cons@> takes, in the worst case, logarithmic time with respect to the length of the list, building a list by repeatedly using <@cons@> is still linear. (*arnaud: guyslain should help me give a good explanation here. *)

We also need a function which turns a <@T (A*A)@> into a <@T A@>. This is effectively multiplication by $2$. The lack of $0$ among the digits{footnote"The constructor <@zero@> represents an empty list of digits."} makes this process recursive. It is best understood as adding a $0$ at the end of the number, then eliminating the $0$ using the following equalities:
{displaymath begin just_left `Brace (array [`C;`L;`C] [
  array_line [$0$   ; $=$ ; cdot ];
  array_line [$x20$ ; $=$ ; $x12$];
  array_line [$x10$ ; $=$ ; $x02$];
]) end}
In terms of binary lists:
{display"<@Module BinaryList.
  @{module_elipsis}@
  Fixpoint twice {A} (l:T (A*A)) : T A :=
    match l with
    | zero => zero
    | tpo (a,b) l => tpt a b (twice l)
    | tpt (a,b) cd l => tpt a b (tpo cd l)
    end.

End BinaryList.@>"}

We can now write a structurally recursive padding function, using binary lists as the structural argument. As we do not know in advance the length of the produced list, a <@PowerList.U@> is returned. We write <@BL@> as a shorthand for <@BinaryList@>:
{display"<@Module PowerList.
  @{module_elipsis}@
  Fixpoint of_binary_list {A X} (d:A->X) (f:A*A->X) (l:BL.T A) : U X :=
    match l with
    | BL.zero => zero
    | BL.tpo a l =>
      tpo (d a) (of_binary_list (d√ód) (f√óf) l)
    | BL.tpt a b l =>
      tpo (f (a,b)) (of_binary_list (d√ód) (f√óf) l)
    end.

End PowerList.@>"}
Where <@g√óf@> is the function which maps <@(x,y)@> to <@(g x,f y)@>.

The rest follows straightforwardly, and we can define the following functions which conclude the algorithm (<@BL@>, <@PL@>, and <@APL@> stand for <@BinaryList@>, <@PowerList@>, and <@AlternatingPowerList@> respectively):
{display"<@Module AlternatingPowerList.
  @{module_elipsis}@
  Definition of_binary_list {A Odd Even} (d:Odd) (f:A->Odd) (g:A->Even) (l:BL.T A) : U Odd Even.

  Definition of_list {A Odd Even} (d:Odd) (f:A->Odd) (g:A->Even) (l:list A) : U Odd Even.

End AlternatingPowerList.


Definition balance {A:Type} (l:list A) : { k:nat & FullTree A k }.@>"}
"

let concl = "{section"Conclusion"}

The <@balance@> function of Section~{ref_ s_coq} is, by virtue of its type alone, a total function which turns lists into full binary trees. Yet, to the cost of using intermediary data-structures, it effectively implements the algorithm of Section~{ref_ s_algo}.

The missing piece is to prove that the infix traversal of <@balance l@> is indeed <@l@>. The infix traversal of a (full) tree is represented in Coq with the functions
{display"<@Fixpoint list_of_full_tree_n {A n} (t:FullTree A n) : list A :=
  match t with
  | Leaf‚ÇÄ => []
  | Leaf‚ÇÅ => []
  | Node _ t‚ÇÅ x t‚ÇÇ =>
     list_of_full_tree_n t‚ÇÅ ++ [x] ++ list_of_full_tree_n t‚ÇÇ
  end.

Definition list_of_full_tree {A} (t:{ k:nat & FullTree A k }) : list A :=
  list_of_full_tree_n (projT2 t).@>"}
We can then state the theorem:
{display"<@Theorem balance_preserves_order A (l:list A) :
    list_of_full_tree (balance l) = l.@>"}

The proof is short and straightforward: we define a traversal function for each intermediate structure; and state a variant of <@balance_preserves_order@> for each intermediate function. Proving the intermediate lemmas is not difficult and can be mostly automatised: we use a very simple generic automated tactic, which discharges most goals. This theorem concludes our easy formal proof of the balancing algorithm.
"

let d = concat [
  intro;
  algo;
  ocaml;
  coq;
  concl;
  command \"bibliography\" [A,"library"] A;
]

(*** metadata ***)

open Llncs

let inria = new_institution "Inria Paris-Rocquencourt\\{textsc"Ens"}, 45 rue d'Ulm,
 75230 Paris Cedex 05, France"
let amu = new_institution "Aix-Marseille University"

let title = {
  title = "Balancing lists: a proof pearl";
  running_title = Some"Balancing lists"
}

let authors = [
  { name = "Guyslain Naves";
    email = "guyslain.naves@lif.univ-mrs.fr";
    institution = amu;
    running_name = None
  };
  { name = "Arnaud Spiwack";
    email = "arnaud@spiwack.net";
    institution = inria;
    running_name = None
  };
]

let packages = [
  "inputenc" , "utf8" ;
  "fontenc" , "T1" ;
  "textcomp", "";
  "microtype" , "" ;
]

let prelude = concat_with_sep [
  usepackage "hyperref";
  command \"bibliographystyle\" [T,"splncs"] T;
] par

let file = \"fulltrees.tex\"

let _ = emit ~file (document
                             ~title
                             ~authors
                             ~abstract
                             ~prelude
                             ~packages
                             d)
