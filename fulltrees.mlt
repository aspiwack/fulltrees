(* -*- compile-command: "ocamlbuild -classic-display fulltrees.pdf" -*- *)

open Prelude
open Ocamlmode


##plugin coqdoc
##verbatim '@' = coqdoc
##verbatim '#' = ocaml_code

(*** labels ***)

let s_algo = label ()
let s_ocaml = label ()
let s_coq = label ()

(*** doc ***)
let abstract = "Starting with an algorithm to turn lists into full trees which uses non-obvious invariants and partial functions, we progressively encode the invariants in the types of the data, removing most of the burden of a correctness proof."

let intro = "{section"Introduction"}

Starting with a list <#l#>, we want to turn it into a binary tree <#t#> of the following form (in OCaml):

{display"<#type 'a tree =
  | Node of 'a tree * 'a * 'a tree
  | Leaf#>"}

With the constraints that <#l#> must be the infix traversal of <#t#> and that <#t#> must be {emph"full"}, in the sense that every level except the last are required to be completely filled. Such a function turns, in particular, sorted list into balanced binary search trees.

There is a number of algorithms to achieve this result in linear time. Here we consider an algorith, presented in Section~{ref_ s_algo}, which repeatedly pairs up trees of height $h$ in a list to form a list of trees of height $h+1$. Our interest in this algorithm sprouts from the fact that its correctness is not obvious; in particular the invariants are complex: the main loop operates on a list of size $2^n-1$ whose elements are full trees whose height is alternatively a given $h$ and $1$.

In Sections~{ref_ s_ocaml} and~{ref_ s_coq} we show refinements of the algorithm where the invariants are pushed into the types, leading to a complete and short proof of correctness in Coq.
"

let algo = "{section"A balancing algorithm" ~label:s_algo}
Sample Ocaml code:
\\
<#let f x = x+3 in
  match f 2 with
  | 3 -> true
  | false#>
"

let ocaml = "{section"Removing partial functions" ~label:s_ocaml}
"

let coq = "{section"Turning to Coq" ~label:s_coq}
Sample Coq code:
\\
<@Fixpoint f (x:nat) : nat :=
  match x with
  | 0 => 0
  | S x' => f x' end@>
"

let concl = "{section"Conclusion"}

The <@balance@> function of Section~{ref_ s_coq} is, by virtue of its type alone, a total function which turns lists into full binary trees. Yet, to the cost of using intermediary data-structures, it effectively implements the algorithm of Section~{ref_ s_algo}.

The missing piece is to prove that the prefix traversal of <@balance l@> is indeed <@l@>. The prefix traversal of a (full) tree is represented in Coq with the functions
{display"<@Fixpoint list_of_full_tree_n {A n} (t:FullTree A n) : list A :=
  match t with
  | Leaf₀ => []
  | Leaf₁ => []
  | Node _ t₁ x t₂ => list_of_full_tree_n t₁ ++ [x] ++ list_of_full_tree_n t₂
  end
.

Definition list_of_full_tree {A} (t:{ n:nat & FullTree A n }) : list A :=
  list_of_full_tree_n (projT2 t)
.@>"}
We can then state the theorem:
{display"<@Theorem balance_preserves_order A (l:list A) : list_of_full_tree (balance l) = l.@>"}

The proof is short and straightforward: we define a traversal function for each intermediate structure and state a variant of <@balance_preserves_order@> for each intermediate function. Proving the intermediate lemmas is not difficult and can be mostly automatised: we use a very simple generic automated tactic, which discharges most goals. This completes our easy formal proof of the balancing algorithm.
"

let d = concat [
  intro;
  algo;
  ocaml;
  coq;
  concl
]

(*** metadata ***)

open Llncs

let inria = new_institution "Inria Paris-Rocquencourt\\{textsc"Ens"}, 45 rue d'Ulm,
 75230 Paris Cedex 05, France"
let amu = new_institution "Aix-Marseille University"

let title = {
  title = "Balancing lists: a proof pearl";
  running_title = Some"Balancing lists"
}

let authors = [
  { name = "Guyslain Naves";
    email = "arnaud@spiwack.net";
    institution = inria;
    running_name = None
  };
  { name = "Arnaud Spiwack";
    email = "guyslain.naves@lif.univ-mrs.fr";
    institution = amu;
    running_name = None
  };
]

let packages = [
  "inputenc" , "utf8" ;
  "fontenc" , "T1" ;
  "textcomp", "";
  "microtype" , "" ;
]

let prelude = concat_with_sep [
  usepackage "hyperref";
  (* command \"bibliographystyle\" [T,"splncs"] T; *)
] par

let file = \"fulltrees.tex\"

let _ = emit ~file (document
                             ~title
                             ~authors
                             ~abstract
                             ~prelude
                             ~packages
                             d)
